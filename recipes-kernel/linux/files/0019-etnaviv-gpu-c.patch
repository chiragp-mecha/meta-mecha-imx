diff --git a/drivers/gpu/drm/etnaviv/etnaviv_gpu.c b/drivers/gpu/drm/etnaviv/etnaviv_gpu.c
index cc5b07f86346..7c0c517e99f6 100644
--- a/drivers/gpu/drm/etnaviv/etnaviv_gpu.c
+++ b/drivers/gpu/drm/etnaviv/etnaviv_gpu.c
@@ -165,7 +165,7 @@ int etnaviv_gpu_get_param(struct etnaviv_gpu *gpu, u32 param, u64 *value)
 		break;
 
 	default:
-		DBG("%s: invalid param: %u", dev_name(gpu->dev), param);
+		printk("%s: invalid param: %u", dev_name(gpu->dev), param);
 		return -EINVAL;
 	}
 
@@ -1731,7 +1731,7 @@ static void etnaviv_gpu_unbind(struct device *dev, struct device *master,
 {
 	struct etnaviv_gpu *gpu = dev_get_drvdata(dev);
 
-	DBG("%s", dev_name(gpu->dev));
+	printk("%s", dev_name(gpu->dev));
 
 	flush_workqueue(gpu->wq);
 	destroy_workqueue(gpu->wq);
@@ -1789,44 +1789,60 @@ static int etnaviv_gpu_platform_probe(struct platform_device *pdev)
 	mutex_init(&gpu->lock);
 	mutex_init(&gpu->fence_lock);
 
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 	/* Map registers: */
 	gpu->mmio = devm_platform_ioremap_resource(pdev, 0);
-	if (IS_ERR(gpu->mmio))
+	if (IS_ERR(gpu->mmio)) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		return PTR_ERR(gpu->mmio);
+	
+	}
+	
 
 	/* Get Interrupt: */
 	gpu->irq = platform_get_irq(pdev, 0);
-	if (gpu->irq < 0)
-		return gpu->irq;
+	if (gpu->irq < 0) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+		return gpu->irq; 
+	}
 
 	err = devm_request_irq(&pdev->dev, gpu->irq, irq_handler, 0,
 			       dev_name(gpu->dev), gpu);
 	if (err) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		dev_err(dev, "failed to request IRQ%u: %d\n", gpu->irq, err);
 		return err;
 	}
 
 	/* Get Clocks: */
 	gpu->clk_reg = devm_clk_get_optional(&pdev->dev, "reg");
-	DBG("clk_reg: %p", gpu->clk_reg);
-	if (IS_ERR(gpu->clk_reg))
+	printk("clk_reg: %p", gpu->clk_reg);
+	if (IS_ERR(gpu->clk_reg)) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		return PTR_ERR(gpu->clk_reg);
+	}
 
 	gpu->clk_bus = devm_clk_get_optional(&pdev->dev, "bus");
-	DBG("clk_bus: %p", gpu->clk_bus);
-	if (IS_ERR(gpu->clk_bus))
-		return PTR_ERR(gpu->clk_bus);
+	printk("clk_bus: %p", gpu->clk_bus);
+	if (IS_ERR(gpu->clk_bus)) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+		return PTR_ERR(gpu->clk_bus); 
+	}
 
 	gpu->clk_core = devm_clk_get(&pdev->dev, "core");
-	DBG("clk_core: %p", gpu->clk_core);
-	if (IS_ERR(gpu->clk_core))
-		return PTR_ERR(gpu->clk_core);
+	printk("clk_core: %p", gpu->clk_core);
+	if (IS_ERR(gpu->clk_core)) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+		return PTR_ERR(gpu->clk_core); 
+	}
 	gpu->base_rate_core = clk_get_rate(gpu->clk_core);
 
 	gpu->clk_shader = devm_clk_get_optional(&pdev->dev, "shader");
-	DBG("clk_shader: %p", gpu->clk_shader);
-	if (IS_ERR(gpu->clk_shader))
-		return PTR_ERR(gpu->clk_shader);
+	printk("clk_shader: %p", gpu->clk_shader);
+	if (IS_ERR(gpu->clk_shader)) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
+		return PTR_ERR(gpu->clk_shader); 
+	}
 	gpu->base_rate_shader = clk_get_rate(gpu->clk_shader);
 
 	/* TODO: figure out max mapped size */
@@ -1837,16 +1853,20 @@ static int etnaviv_gpu_platform_probe(struct platform_device *pdev)
 	 * autosuspend delay is rather arbitary: no measurements have
 	 * yet been performed to determine an appropriate value.
 	 */
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 	pm_runtime_use_autosuspend(gpu->dev);
 	pm_runtime_set_autosuspend_delay(gpu->dev, 200);
 	pm_runtime_enable(gpu->dev);
 
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 	err = component_add(&pdev->dev, &gpu_ops);
 	if (err < 0) {
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 		dev_err(&pdev->dev, "failed to register component: %d\n", err);
 		return err;
 	}
 
+	printk("EDEBUG: %d-%s\n",__LINE__,__func__);
 	return 0;
 }
 
